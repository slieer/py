_xxx 不用'from module import *'导入
__xxx__系统定义名字
__xxx 类中的私有变量名


3.4.1 模块结构和布局
用模块来合理组织你的Python 代码是简单又自然的方法。你应该建立一种统一且容易阅读
的结构，并将它应用到每一个文件中去。下面就是一种非常合理的布局：
# (1) 起始行(Unix)
# (2) 模块文档
# (3) 模块导入
# (4) 变量定义
# (5) 类定义
# (6) 函数定义
# (7) 主程序
图3–1 一个典型模块的内部结构图解。
(1) 起始行
通常只有在类Unix 环境下才使用起始行，有起始行就能够仅输入脚本名字来执行脚本，无
需直接调用解释器。
(2)模块文档
简要介绍模块的功能及重要全局变量的含义，模块外可通过 module.__doc__ 访问这些内
容。
(3)模块导入
导入当前模块的代码需要的所有模块；每个模块仅导入一次（当前模块被加载时）；函数
内部的模块导入代码不会被执行， 除非该函数正在执行。
(4)变量定义
这里定义的变量为全局变量，本模块中的所有函数都可直接使用。从好的编程风格角度说，
除非必须，否则就要尽量使用局部变量代替全局变量，如果坚持这样做，你的代码就不但容易
维护，而且还可以提高性能并节省内存。
(5)类定义语句
所有的类都需要在这里定义。当模块被导入时class 语句会被执行, 类也就会被定义。类
的文档变量是class.__doc__。
(6)函数定义语句
此处定义的函数可以通过module.function()在外部被访问到，当模块被导入时 def 语句
会被执行， 函数也就都会定义好，函数的文档变量是function.__doc__。
(7) 主程序
无论这个模块是被别的模块导入还是作为脚本直接执行，都会执行这部分代码。通常这里
不会有太多功能性代码，而是根据执行的模式调用不同的函数。

